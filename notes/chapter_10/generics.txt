--- Generic data type ---

- When defining functions that use generic data types, we place the generic
  type in the signature of the function where we would specify the data types of
  the parameters and return values.

- We can update the largest function in the previous section to find the
  largest value in a char slice:

    fn largest_i32(list: &[i32]) -> i32 {
        let mut largest = list[0];

        for &item in list.iter() {
            if item > largest {
                largest = item;
            }
        }

        largest
    }

    fn largest_char(list: &[char]) -> char {
        let mut largest = list[0];

        for &item in list.iter() {
            if item > largest {
                largest = item;
            }
        }

        largest
    }

    fn main() {
        let number_list = vec![34, 50, 25, 100, 65];

        let result = largest_i32(&number_list);
        println!("The largest number is {}", result);

        let char_list = vec!['y', 'm', 'a', 'q'];

        let result = largest_char(&char_list);
        println!("The largest char is {}", result);
    }

- We can define a generic function that performs the logic in largest on any
  list type: 

	fn largest<T>(list: &[T]) -> T {

- To define a generic function we must place the type placeholder ('T') inside
 angle brackets between the name and the parameter list. Also, we must
 explicitly mention the paramtery type and return type like in any other
 function. 

- Notice that the list parameter is a slice of values of the generic type T. 

- We can replace our old non-generic function with the newly defined generic
  one, please note that this code will not compile:

	fn largest<T>(list: &[T]) -> T {
		let mut largest = list[0];

		for &item in list.iter() {
			if item > largest {
				largest = item;
			}
		}

		largest
	}

	fn main() {
		let number_list = vec![34, 50, 25, 100, 65];

		let result = largest(&number_list);
		println!("The largest number is {}", result);

		let char_list = vec!['y', 'm', 'a', 'q'];

		let result = largest(&char_list);
		println!("The largest char is {}", result);
	}

- If we try to run this code the compiler will complain about some type
  missing an implementation of 'std::cmp::PartialOrd'. 

- This error message means that the function largest will not work on all
  possible types for T. This is because our function must compare values of
  type T, we can only use types whose values can be ordered.

- We can define structs to use a generic type parameter, similar to functions,
  by using the '<>' syntax: 

	struct Point<T> {
		x: T,
		y: T,
	}

	fn main() {
		let integer = Point { x: 5, y: 10 };
		let float = Point { x: 1.0, y: 4.0 };
	} 

- The definition of Point<T> means that both its fields are of the same type!
  If we try to create an instance of Point that has values of different types
  we'll get a compilation error.

- To define a Point struct where x & y are generic but could have different
  types, we can use multiple generic type parameters:

	struct Point<T, U> {
		x: T,
		y: U,
	}

	fn main() {
		let both_integer = Point { x: 5, y: 10 };
		let both_float = Point { x: 1.0, y: 4.0 };
		let integer_and_float = Point { x: 5, y: 4.0 };
	}

- Although we're allowed to use as many generic type paramters as we want,
  using more than a few makes our code hard to read. When you need lots of
  generic types in our code, it means our code must broken down into smaller
  pieces. 

- As with structs, we can defined enums to hold generic data types in their
  variants:  

	enum Option<T> {
		Some(T),
		None,
	}

- Enums can use multiple generic types as well:

	enum Result<T, E> {
		Ok(T),
		Err(E),
	}

- We can implement methods on structs and enums that use gneric types in their
  definition as well:

	struct Point<T> {
		x: T,
		y: T,
	}

	impl<T> Point<T> {
		fn x(&self) -> &T {
			&self.x
		}
	}

	fn main() {
		let p = Point { x: 5, y: 10 };

		println!("p.x = {}", p.x());
	}

- Using the syntax above we can implement methods only on Point<f32> instances
  rather than on Point<T> instances with any generic type:

	impl Point<f32> {
		fn distance_from_origin(&self) -> f32 {
			(self.x.powi(2) + self.y.powi(2)).sqrt()
		}
	} 

- Generic type paremters in a strct definition aren't always the same as those
  used in a struct's method singatures. Consider the following example that takes
  in a generic point struct, and creates a new point struct using the generic
  type of the self struct (this) and parameter struct:

	struct Point<T, U> {
		x: T,
		y: U,
	}

	impl<T, U> Point<T, U> {
		fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
			Point {
				x: self.x,
				y: other.y,
			}
		}
	}

	fn main() {
		let p1 = Point { x: 5, y: 10.4 };
		let p2 = Point { x: "Hello", y: 'c'};

		let p3 = p1.mixup(p2);

		println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
	}

--- Performance of code using generics --- 

- Rust implements generics in such a way that your code does not run any
  slower using generic types.

- Rust accomplishes this by performing monomorphization of the code that is
  using generics at compile time. Monomorphization is the process of turning
  generic code into specific code by filling in the concrete types that used when
  compiled.

- Because Rust compile generic code into code that specifies the type in each
  instance of a generic type, we pay no runtime cost for using generics.

 
