--- References and borrowing --- 

- The issue with the tuple code in the previous section if that we have to return the String to the calling function so that we can still use the string after the call to calculate_length because String was moved. 

- In Rust we can define our functions to use references to an object instead of passing owernship of the value:

fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}

- The ampersands (&) are known as references, and they allow the programmer to refer to a value without taking owernship of it. In the case of a String object, a reference is a pointer to the variable that points to a String: 

s (ptr) ----> s1 (ptr, length, capacity) ----> "hello"

- References can refer to a value, but do NOT OWN IT! Because of this, the value a reference points to will not be dropped when the reference goes out of scope. This way when we pass a reference into a function, we don't have to return the values to give back ownership because we never had it in the first place. 

- In Rust, having references as function parameters is known as "borrowing". 

- If we try to modify a value we're borrowing, the compiler will complain that we're not allowed to mutate a reference. 

*** NOTE: Just as variables are immutable by default SO ARE REFERENCES! 

--- Mutable references ---

- Just like variables, references can also be mutable: 

fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
} 

*** NOTE: You can only have one mutalbe reference to a particular piece of data in a particular scope:

let mut s = String::from("hello");

let r1 = &mut s;
let r2 = &mut s;

println!("{}, {}", r1, r2);

- ^ The code above will fail, the compiler will complain that you cannot borrow 's' as a mutable reference  more than once. 

- The benefit of having this restriction is that Rust can prevent data races at compile time. A data race is a race condition and happens when these behavior occur:

1) Two or more pointers access the same data at the same time.
2) At least one of the pointers is writing data.
3) There no mechanism being used to synchronize access to the data.

- Rust prevents data races from happening by not compiling code with data races. We can mutate a reference multiple times, but not simultaneously:


let mut s = String::from("hello");

{
    let r1 = &mut s;

} // r1 goes out of scope here, so we can make a new reference with no problems.

let r2 = &mut s;

- What would happen if we combine mutable and immutable references? Consider the following code with results in an error: 

let mut s = String::from("hello");

let r1 = &s; // no problem
let r2 = &s; // no problem
let r3 = &mut s; // BIG PROBLEM

println!("{}, {}, and {}", r1, r2, r3);


- If we we run the code above the compiler will complain that 's' cannot be borrowed as mutable because it is already borrowed as immutable. 


*** NOTE: A reference's scope starts from where it is introduced and continues until the last time that reference is used. The following code will compile:

let mut s = String::from("hello");

let r1 = &s; // no problem
let r2 = &s; // no problem
println!("{} and {}", r1, r2);
// r1 and r2 are no longer used after this point

let r3 = &mut s; // no problem
println!("{}", r3);

- This code compiles because the scopes of the immutable references end after the println! macro, which is before the mutable reference r3 is created. These scopes don't overlap with each other, so this code is allowed. 


--- Dangling references --- 

- In languages that use pointers, its to easy to create a dangling pointer. These pointers reference a location in memory that may have been given to someone else, by freeing some memory while preserving a pointer to that memory. 


- In Rust, the compiler guarantees that references will never be dangling, if you have a reference to some data the compiler ensures that the data will not go out of scope before the reference does:

fn main() {
    let reference_to_nothing = dangle();
}

fn dangle() -> &String { // dangle returns a reference to a String

    let s = String::from("hello"); // s is a new String

    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped. Its memory goes away.
  // Danger!

- The compiler will complain saying that the function dangle returns a borrowed value (reference), but there is no value for it to be borrowed from. Because s is created inside the scope of the function dangle, once the function returns s will be deallocated. Since we returned a reference to this String, after the function returns the reference to s will be pointing to an invalid String. 

- The solution to fixing this error is to return the String directly, this way we move the data from s to reference_to_nothing: 

fn no_dangle() -> String {
    let s = String::from("hello");
    s
}



 


  
