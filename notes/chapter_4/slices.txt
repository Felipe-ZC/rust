--- The slice type ---- 

- Slices DO NOT HAVE OWNERSHIP!

- Slices let you reference a contiguous sequence of elements in a collection, rather than the whole collection. 

- Problem: write a function that takes a string and returns the first word it finds in that string. If the function doesn’t find a space in the string, the whole string must be one word, so the entire string should be returned.

- The first solution to this problem involves returning the index of the end of the word: 

fn first_word(s: &String) -> usize {
    let bytes = s.as_bytes(); // Conert String to an array of bytes

    for (i, &item) in bytes.iter().enumerate() { // Iterate over array of bytes
        if item == b' ' { // Look for a whitespace char
            return i;
        }
    }

    s.len()
}

- Iter is a method that returns each element in a collection.

- Enumerate wraps the results of iter and returns each element as part of a tuple instead:
    1) First elment in tuple is the index of the element in a collection.
    2) Second elment in tuple is a reference to the element in a collection.

- Because the enumerate method returns a tuple, we can use patterns to deconstruct the tuple. In the for loop we specify a pattern that has i for the index and &item for the single byte in the tuple. 

- Inside of the for loop, we search for a whitespace character using the byte literal syntax, that is,"b ' '" . If we find a whitespace, we return the position of this character otherwise we return the whole length of the string. 

- There is a problem with the code, because we're returning a usize on its own however its only meaningful in the context of the &String. In other words, because its a seperate value from the String, theres no gaurantee that it will still be valid in the future: 

fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s); // word will get the value 5

    s.clear(); // this empties the String, making it equal to ""

    // word still has the value 5 here, but there's no more string that
    // we could meaningfully use the value 5 with. word is now totally invalid!
}

- ^ The code above compiles without any errors and would also do so if we used the word variable after calling s.clear(). Because word isnt connected to the state of s at all, word still contains the value 5 after cleaning the String.

- Having to worry about synchronizing data in s with word is tedious and error prone, luckily for us, Rust implements a solution to this problem known as String Slices.

--- String Slices --- 

- A string slice is a reference to part of a String:

let s = String::from("hello world");

let hello = &s[0..5];
let world = &s[6..11];

- The syntax is similar to that of a reference but inculues a starting and ending index. Like most other programming languages, [start, end), starting position is inclusive, ending position is exclusive. 

- Internally, the slice data structure stores a pointer to the starting position and the length of the slice (end - start).

s           world
|           |    
v           V
0 1 2 3 4 5 6 7 8 9 10 
h e l l o   w o r l d 

- Using Rust's range syntax, if you want to start at the first index you can drop he value before the first two periods:

let slice = &s[0..2] <---> let slice = &s[..2]

- We can also drop the trailing number to slice until the end of the string: 

let len = s.len();
let slice = &s[3..len] <---> let slice = &s[3..]

- We can also drop both arguments and take a slice of the entire String: 

let len = s.len();
let slice = &s[0..len] <---> let slice = &s[..]

*** NOTE: String slice ranges must occur at valid UTF-8 character boundaries. We are assuming ASCII only charcters in this section. 


- We can rewrite the first_word function to return a slice:

fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}

- The type annotation for a string slice is &str. Not much has changed, we're still reading the string as an array of bytes and getting the index from the enumerate() method. This time around, when we find the first whitepsace char, we return a string slice instead of just the index.

- The important part here is that the value returned is tied to the underlying data.

- A string slice is a reference to part of the string we want to 'slice' from and the number of elements in that slice. If the underlying data changes, the slice itself will also change accordingly. 

- What would happen if we try to use a string slice whose underlying String has been cleared? Lets take a look:

fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s); // immutable reference

    s.clear(); // error! mutable reference must be used here to clear s.

    println!("the first word is: {}", word);
}

- The code above will not compile because of Rust's borrowing rules (ownership). If we have an immutable reference to a value, we cannot also refer to the same value using a mutable reference.

- Clear needs to mutable reference to a String to truncate it!

--- String literals are slices ---

- Recall that string literals are statically allocated, which means they're saved inside our compiled program and exists for the entire duration that it runs. A string literal is a slice that points to a specific point in the compiled program. The type of a string literal is '&s' and is the reason they are immutable since '&s' is an immutable reference.

--- String slices as parameters --- 

- String slices can be passed a parameters to functions that accept Strings, this is useful because a function with the signature 

	fn first_word(s: &str) 

will accept both &String and &str values. 

--- Other slices --- 

- String slices are specific to strings, but there a more general type of slice we can use:


let a = [1, 2, 3, 4, 5];

let slice = &a[1..3];


