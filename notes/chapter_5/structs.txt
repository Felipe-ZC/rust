--- Structs --- 

- A struct is a custom data type that allows you to name and group together multiple realted values. 

- Structs can have mixed types, the syntax is as follows: 

struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

- To use a struct after its been defined, we create an instance of the struct as follows: 

let user1 = User {
    email: String::from("someone@example.com"),
    username: String::from("someusername123"),
    active: true,
    sign_in_count: 1,
};

- To access the value of a specific field we dot (.) notation and if the instance is mutable we can change the value using the dot operator as well:

user1.email = String::from("anotheremail@example.com");

*** Note: The entire struct must be mutable, Rust does not allow us to mark certain fields as mutable. 

- We can create a 'constructor' for our struct by simply defining a function that takes in the structs  values and returns an instance of that struct:

fn build_user(email: String, username: String) -> User {
    User {
        email: email,
        username: username,
        active: true,
        sign_in_count: 1,
    }
}

--- Field init shorthand ---

- Notice that the parameters names in the function above and the field names of the struct are exactly the same, Rust allows us to omit the field name when initialzing a new instance:

fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}

--- Struct update syntax ---

- Often, it is useful to create a struct that uses most of an old instance's values but changes some. Consider the following:

let user2 = User {
    email: String::from("another@example.com"),
    username: String::from("anotherusername567"),
    active: user1.active,
    sign_in_count: user1.sign_in_count,
};

let user2 = User {
    email: String::from("another@example.com"),
    username: String::from("anotherusername567"),
    ..user1
};

--- Tuple Struct ---

- Structs can also be defined in a way that looks similar to tuples. Tuple structs have the added meaning the struct name provides, but dont; have names associated with their fields, rathr they just specify the types of the fields. 

- Tuple structs are useful when you want to give the whole tuple a name and make it a different type from other tuples:

struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

let black = Color(0, 0, 0);
let origin = Point(0, 0, 0);

- Black and origin are different types! This is because they are instances of different tuple structs.

--- Unit like struct --- 

- We can also define a struct that does not have any fields! These are useful when implementing traits on types. 

