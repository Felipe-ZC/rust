--- Enums --- 

- Enums, short for enumerations, allow the programmer to define a type by enumerating its possible values. 

- We should use an enum if we can enumerate all possible values for a variable. Consider the case of IP addresses, any IP address can be version four or version six. 

- We can express this concept in code by defining an enum:

enum IpAddrKind {
    V4,
    V6,
}

--- Enum Values ---

- We can create two variants of the IpAddrKind enum:

let four = IpAddrKind::V4;
let six = IpAddrKind::V6;

- Both four and six are of the same type, they are namespace with the "::" operator and we can define a function that takes in any variant of IpAddrKind:

fn route(ip_kind: IpAddrKind) { }
route(IpAddrKind::V4);
route(IpAddrKind::V6);

- Notice that we are not storing the IP address data, we only what kind it is. To store the data we might use a struct: 

enum IpAddrKind {
    V4,
    V6,
}

struct IpAddr {
    kind: IpAddrKind,
    address: String,
}

let home = IpAddr {
    kind: IpAddrKind::V4,
    address: String::from("127.0.0.1"),
};

let loopback = IpAddr {
    kind: IpAddrKind::V6,
    address: String::from("::1"),
};

- Although the above code is correct, we can represent the same concept in a more concise way using just an enum, rather than an enum inside of a struct, by putting data directly into each enum variant:

enum IpAddr {
    V4(String),
    V6(String),
}

let home = IpAddr::V4(String::from("127.0.0.1"));

let loopback = IpAddr::V6(String::from("::1")); 

- Each enum variant can have different types and amounts of associated data. Version four type ip addresses will have four values between 0 and 255. If we wanted to express this concept in code we could write: 

enum IpAddr {
    V4(u8, u8, u8, u8),
    V6(String),
}

let home = IpAddr::V4(127, 0, 0, 1);

let loopback = IpAddr::V6(String::from("::1"));

- We can put any kind of data we want in enums, strings, numeric types, structs and other enums as well!

*** Note: Rust's standard library includes a definition for IpAddr as an enum with the variants discussed here.

- Lets take a look at the following enum: 

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

- Defining an enum like the one above is similar to defining different kinds of struct definitions, except for the syntax and all the variants are grouped under the Message type. 

- Message enum using structs: 

struct QuitMessage; // unit struct
struct MoveMessage {
    x: i32,
    y: i32,
}
struct WriteMessage(String); // tuple struct
struct ChangeColorMessage(i32, i32, i32); // tuple struct

- Notice that all these strcuts have their own type, which means we could not easily define a function to take any of kind of message as we could with the Message enum. 

- We can define methods on enums just like we can on structs: 

impl Message {
    fn call(&self) {
        // method body would be defined here
    }
}

let m = Message::Write(String::from("hello"));
m.call();

--- The Option Enum ---

- The Option type is a standard library defined enum that is used to express a scenario in which a value could be something or it could be nothing. RUST DOES NOT HAVE NULL!

- While Rust does not have nulls, it uses the Option type to express the idea that a value might not be valid or is absent at the current time:

enum Option<T> {
    Some(T),
    None,
}

- The Option enum is included in the prelude and so are its variants Some and None, you don't need to explicitly bring them into scope. Some and None can be used without the Option:: prefix. 

- The T syntax is known as a generic type parameter, and for now it means the Some variant of the Option enum can hold one piece of data of any type. 

let some_number = Some(5);
let some_string = Some("a string");

let absent_number: Option<i32> = None;

- If we use None we have to tell the compiler what type of Option<T> we have, because the compiler can't infer the type of the Some variant by looking only at None. 

- So why is Option<T> better than having null? 

- Basically, Option<T> and T are different types, the compiler wont let us use an Option<T> value as if it was a valid value: 

let x: i8 = 5;
let y: Option<i8> = Some(5);
let sum = x + y;

- This code will not compile, because Rust does not understand how to add an i8 and an Option<i8>, because they're different types! 

- In other words, you have to convert an Option<T> to a T before you can perform whatever operations are defined for T. This helps catch one of the most common issues with null: assuming that something isn't null when it actually is. 

*** Note: Every value that has a type that ISN'T Option<T> is NOT NULL!

- In general we want to run code that handle BOTH Some and None variants for the Option<T> type.
