--- Use keyword ---

- There is a simplier way of specifying crate paths in Rust, we can bring a
  path into scope and then call the items that path as if they're local with the
  'use' keyword:

mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

- Adding use and the path in scope is similar to creating a symbolic link the
  filesystem. Paths brought into scope with the 'use' keyword also check for
  privacy.  

- This is how we would specify a relative path with the use keyword:

mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use self::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

- Using 'self' in this way might not be available in the future, this is an
  inconsistency Rust developers are working to eliminiate.

--- Idiomatic use paths --- 

- There is a reason why we decided to speicfy use crate::front_of_house::hosting rather than using the full path up until add_to_waitlist: 

mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
    add_to_waitlist();
    add_to_waitlist();
}

- Specifying a function's parent module with 'use' so we have to mention the
  parent module when calling the function makes it clear that the function isn't
  locally defined. If we don't specify the parent module, it isn't clear where 
  add_to_waitlist is defined.  

- On the other hand, specifying structs and enums should include the full path
  to the item. There is no strong reason behind this idiom, its just the
  convention that has emerged. There is an execption to this idiom, if we're
  bringing in two items witht he same name, Rust does not allow this so we have
  to specify the parent module:

use std::fmt;
use std::io;

fn function1() -> fmt::Result {
    // --snip--
}

fn function2() -> io::Result<()> {
    // --snip--
}

--- Providing new names with the as keyword --- 

- We can bring in two types with use that have the same name by using the 'as' keyword:

use std::fmt::Result;
use std::io::Result as IoResult;

fn function1() -> Result {
    // --snip--
}

fn function2() -> IoResult<()> {
    // --snip--
}

--- Re-exporting names with pub use ---

- When we bring a name into scope with the use keyword, that name is private
  by default. To refer this name we can combine pub and use. This technique is
  called re-exporting because we're bringing an item into scope but also making
  it available to other items in that scope:

mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

--- Using external packages --- 

- To bring an external package, we add a dependency to our Cargo.toml:

[dependencies]
rand = "0.5.5"

- Adding this line to the Cargo.toml file tells Cargo to download the rand
  package and any dependencies from crates.io and makes the rand package
  available in our project.

- To bring this pacakge into the scope of our package, we add the 'use' keyword
  line starting with the name of the package and the items we want to bring
  into scope:

use rand::Rng;
fn main() {
    let secret_number = rand::thread_rng().gen_range(1, 101);
}

*** Note: The standard library (std) is also a crate that is external to our package. Std is shipped with Rust, so the is no need to mention it in the Cargo.toml file, but we do need to bring it in to scope with the 'use' keyword: 

use std::collections::HashMap;

--- Nested paths ---

- We can use nested use statements to refer to multiple items that are defined in the same package:

use std::cmp::Ordering; use std::io; <--------------->  use std::{cmp::Ordering, io};

- We can use a nested path at any level in a path, which is useful when
  combining two use statements: 

use std::io;
use std::io::Write;

use std::io::{self, Write};

--- The glob operator --- 

- If we want to bring in all public items defined in a path into scope, we can
  use the '*' character in a use statement. This symbol is called the glob
  operator:  

use std::collections::*;
